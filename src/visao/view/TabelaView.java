/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dados.DAO.DicionarioDAO;
import visao.view.JTable.CustomRenderer;
import visao.view.SRSJTree.Root;
import controle.dicionario.Dicionario;
import entity.Conceito;
import entity.Projeto;
import entity.Tabela;
import controle.etiquetador.Etiquetador;
import controle.intellisense.AbstractParser;
import controle.intellisense.IntellisenseListener;
import controle.intellisense.ParserDescricaoFuncao;
import controle.intellisense.ParserNomeFuncao;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.EventQueue;
import java.beans.Beans;
import java.io.IOException;
import java.util.ArrayList;

import java.util.List;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.RollbackException;
import javax.swing.DefaultCellEditor;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;
import javax.swing.text.JTextComponent;
import visao.view.tools.Arquivo;
import visao.view.tools.Constante;
import visao.view.tools.Timer;
import view.tools.IJframe;
import java.awt.*;
import visao.view.tools.ConstrutorDeAcao;

/**
 *
 * @author helcio.soares
 */
public class TabelaView extends JPanel implements IJframe {

    //public  JTextComponent jTextComponent;
    private Projeto projeto;
    private int idTipoTabela;
    private CustomRenderer cr;
    private String sentencaAnterior;
    private JFrame pai;
    private String tipoTabela;

    public TabelaView() {
        initComponents();
        if (!Beans.isDesignTime()) {
            entityManager.getTransaction().begin();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("SRSEDITORPU").createEntityManager();
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT t FROM Tabela t  where t.idProjeto = :pIdProjeto and t.idTipoTabela = :pIdTipoTabela");
        query.setParameter("pIdProjeto", this.projeto);  query.setParameter("pIdTipoTabela", this.idTipoTabela);
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
        masterScrollPane = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nomeField = new javax.swing.JTextField();
        deField = new javax.swing.JTextField();

        FormListener formListener = new FormListener();

        masterTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        masterTable.getTableHeader().setReorderingAllowed(false);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, masterTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nome}"));
        columnBinding.setColumnName("Nome");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${de}"));
        columnBinding.setColumnName("Descrição");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        masterTable.addFocusListener(formListener);
        masterTable.addMouseListener(formListener);
        masterTable.addPropertyChangeListener(formListener);
        masterTable.addKeyListener(formListener);
        masterTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent evt) {
                if (evt.getValueIsAdjusting()) {
                    Constante.desenharArvores("");
                    return;
                }
                int selected = masterTable.getSelectedRow(); //Use getSelectedRows se vc permite seleção múltipla
                int row = masterTable.getSelectedRow();
                try{
                    sentencaAnterior = masterTable.getModel().getValueAt(row, 1).toString();
                } catch (Exception e) {
                    sentencaAnterior = "";
                }
                Constante.desenharArvores(sentencaAnterior);
                Editor.setTitulo(projeto.getDe() + "\\" + tipoTabela + "\\"+ nomeField.getText());
                }
            });
            masterScrollPane.setViewportView(masterTable);
            if (masterTable.getColumnModel().getColumnCount() > 0) {
                masterTable.getColumnModel().getColumn(0).setMinWidth(90);
                masterTable.getColumnModel().getColumn(0).setPreferredWidth(90);
                masterTable.getColumnModel().getColumn(0).setMaxWidth(230);
            }

            jLabel1.setText("Nome:");

            jLabel2.setText("Descrição:");

            org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nome}"), nomeField, org.jdesktop.beansbinding.BeanProperty.create("text"));
            bindingGroup.addBinding(binding);
            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), nomeField, org.jdesktop.beansbinding.BeanProperty.create("editable"));
            bindingGroup.addBinding(binding);

            nomeField.addFocusListener(formListener);

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.de}"), deField, org.jdesktop.beansbinding.BeanProperty.create("text"));
            bindingGroup.addBinding(binding);
            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), deField, org.jdesktop.beansbinding.BeanProperty.create("editable"));
            bindingGroup.addBinding(binding);

            deField.addFocusListener(formListener);
            deField.addActionListener(formListener);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1)
                        .addComponent(nomeField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(deField)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(0, 0, Short.MAX_VALUE))))
                .addComponent(masterScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(masterScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2))
                    .addGap(0, 0, 0)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nomeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(deField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            );

            bindingGroup.bind();
        }

        // Code for dispatching events from components to event handlers.

        private class FormListener implements java.awt.event.ActionListener, java.awt.event.FocusListener, java.awt.event.KeyListener, java.awt.event.MouseListener, java.beans.PropertyChangeListener {
            FormListener() {}
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (evt.getSource() == deField) {
                    TabelaView.this.deFieldActionPerformed(evt);
                }
            }

            public void focusGained(java.awt.event.FocusEvent evt) {
                if (evt.getSource() == masterTable) {
                    TabelaView.this.masterTableFocusGained(evt);
                }
                else if (evt.getSource() == nomeField) {
                    TabelaView.this.nomeFieldFocusGained(evt);
                }
                else if (evt.getSource() == deField) {
                    TabelaView.this.nomeFieldFocusGained(evt);
                }
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
            }

            public void keyPressed(java.awt.event.KeyEvent evt) {
                if (evt.getSource() == masterTable) {
                    TabelaView.this.masterTableKeyPressed(evt);
                }
            }

            public void keyReleased(java.awt.event.KeyEvent evt) {
            }

            public void keyTyped(java.awt.event.KeyEvent evt) {
            }

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getSource() == masterTable) {
                    TabelaView.this.masterTableMouseClicked(evt);
                }
            }

            public void mouseEntered(java.awt.event.MouseEvent evt) {
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
            }

            public void mousePressed(java.awt.event.MouseEvent evt) {
            }

            public void mouseReleased(java.awt.event.MouseEvent evt) {
            }

            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                if (evt.getSource() == masterTable) {
                    TabelaView.this.masterTablePropertyChange(evt);
                }
            }
        }// </editor-fold>//GEN-END:initComponents

    private void deFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deFieldActionPerformed

    private void nomeFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nomeFieldFocusGained
        if (!entityManager.getTransaction().isActive()) {
            entityManager.getTransaction().begin();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_nomeFieldFocusGained

    private void masterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_masterTableMouseClicked
    }//GEN-LAST:event_masterTableMouseClicked

    private void masterTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_masterTableKeyPressed
     }//GEN-LAST:event_masterTableKeyPressed

    private void masterTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_masterTableFocusGained
    }//GEN-LAST:event_masterTableFocusGained

    private void masterTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_masterTablePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_masterTablePropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField deField;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private java.util.List<entity.Tabela> list;
    private javax.swing.JScrollPane masterScrollPane;
    private javax.swing.JTable masterTable;
    private javax.swing.JTextField nomeField;
    private javax.persistence.Query query;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TabelaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TabelaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TabelaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TabelaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

//        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new JFrame();
                frame.setContentPane(new TabelaView());
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.pack();
                frame.setVisible(true);
            }
        });
    }

    @Override
    public void setProjeto(Projeto projeto, int idTipoTabela) {
        this.projeto = projeto;
        this.idTipoTabela = idTipoTabela;
        this.tipoTabela = Constante.hashTipoTabela.get(this.idTipoTabela).getDe();
        initComponents();
        //Set your own renderer.  You'll have to set this for Number and Boolean too if you're using those
        Color bg = masterTable.getSelectionBackground();
        cr = new CustomRenderer(masterTable.getDefaultRenderer(Object.class), Color.WHITE);
        //   masterTable.setDefaultRenderer(Object.class, cr);
        if (this.idTipoTabela == Constante.FUNCIONALIDADE - 100) {
            ativaListeners(nomeField, new ParserNomeFuncao(projeto));
            ativaListeners(deField, new ParserDescricaoFuncao(projeto));
        }
        if (masterTable.getModel().getRowCount() > 0) {
            masterTable.setRowSelectionInterval(0, 0);
        } else {
            Constante.desenharArvores("");
        }
    }

    private void ativaListeners(JTextComponent jTextComponent, AbstractParser parse) {
        IntellisenseListener intellisenseListener = new IntellisenseListener(jTextComponent, parse);
        if (jTextComponent instanceof JTextField) {
            ((JTextField) jTextComponent).addActionListener(intellisenseListener);
        }

    }

    @Override
    public void validarSentenca() {
        Arquivo tempo = null;
        try {
            tempo = new Arquivo(Constante.hashTipoTabela.get(this.idTipoTabela).getDe() + ".dat", true);
        } catch (IOException ex) {
            Logger.getLogger(CasoDeUsoView.class.getName()).log(Level.SEVERE, null, ex);
        }
        Timer timer = new Timer();

        timer.elapsed("Inicio");

        ParserDescricaoFuncao parser = new ParserDescricaoFuncao(projeto);
        int row = masterTable.getSelectedRow();
        String sentenca = masterTable.getModel().getValueAt(row, 1).toString();
        try {
            Root raiz = parser.validarSentenca(sentenca);
            if (!sentenca.equals(sentencaAnterior)) {
                Constante.arvoresSentencas.remove(sentencaAnterior);
            }
            Constante.arvoresSentencas.put(sentenca, raiz);
        } catch (Exception ex) {
            Logger.getLogger(TabelaView.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            tempo.escreveArquivo(timer.elapsed("fim") + "\n");
            tempo.fecha();
        } catch (IOException ex) {
            Logger.getLogger(TabelaView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    @Override
    public void incluir() {
        if (!entityManager.getTransaction().isActive()) {
            entityManager.getTransaction().begin();
        }
        entity.Tabela t = new entity.Tabela();
        t.setIdProjeto(this.projeto);
        t.setIdTipoTabela(idTipoTabela);
        entityManager.persist(t);
        list.add(t);
        int row = list.size() - 1;
        masterTable.setRowSelectionInterval(row, row);
        masterTable.scrollRectToVisible(masterTable.getCellRect(row, 0, true));
    }

    @Override
    public void salvar() {
        if (!entityManager.getTransaction().isActive()) {
            entityManager.getTransaction().begin();
        }
        int[] selected = masterTable.getSelectedRows();
        entity.Tabela t1 = list.get(masterTable.convertRowIndexToModel(selected[0]));
        String lemma = null;
        try {
            lemma = Constante.recuperarLemmaDaPalavra(nomeField.getText());

            t1.setNomeLemma(lemma);
            DicionarioDAO dicionarioDAO = new DicionarioDAO();
            String sinonimo = dicionarioDAO.recuperarSinonimoPorChave1(lemma, projeto);
            if (!sinonimo.isEmpty()) {
                int resultado = JOptionPane.showConfirmDialog(null, "'" + sinonimo + "' é sinonimo de '" + nomeField.getText()
                        + "', deseja utilizá-lo? \n Se não a operação será cancelada!", "Alerta!", JOptionPane.YES_NO_OPTION);
                if (resultado == JOptionPane.YES_OPTION) {
                    Conceito c = dicionarioDAO.recuperarConceitoPorLemmaNome(sinonimo, projeto.getId());
                    t1.setNome(c.getDe());
                    t1.setNomeLemma(c.getNomeLemma());
                } else {
                    return;
                }
            }
            ConstrutorDeAcao construtorDeAcao = new ConstrutorDeAcao();
            construtorDeAcao.gravarAcao(nomeField.getText().toLowerCase());
            entityManager.getTransaction().commit();
            entityManager.getTransaction().begin();
        } catch (RollbackException rex) {
            JOptionPane.showMessageDialog(null, "Já existe um registro com esse nome!");
            entityManager.getTransaction().begin();
        } catch (Exception ex) {
            Logger.getLogger(TabelaView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void refresh() {
        entityManager.getTransaction().begin();
        java.util.Collection data = query.getResultList();
        for (Object entity : data) {
            entityManager.refresh(entity);
        }
        list.clear();
        list.addAll(data);
    }

    @Override
    public void deletar() {
        int[] selected = masterTable.getSelectedRows();
        if (!entityManager.getTransaction().isActive()) {
            entityManager.getTransaction().begin();
        }
        entity.Tabela t = list.get(masterTable.convertRowIndexToModel(selected[0]));
        try {
            int resultado = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja apagar o registro " + nomeField.getText() + "?", "Alerta!", JOptionPane.YES_NO_OPTION);
            if (resultado == JOptionPane.YES_OPTION) {
                entityManager.remove(t);
                entityManager.getTransaction().commit();
                list.remove(t);
            } else {
                return;
            }
        } catch (javax.persistence.RollbackException e) {
            JOptionPane.showMessageDialog(null, "O registro nao pode ser deletado!");
        }
        if (selected[0] > list.size() - 1) {
            masterTable.setRowSelectionInterval(list.size() - 1, list.size() - 1);
        } else {
            masterTable.setRowSelectionInterval(selected[0], selected[0]);
        }
    }

    @Override
    public void validarTodasSentenca() {
        validar();
    }

    private void validar() {
        Container c = this.getParent();
        while (!c.getClass().equals(Editor.class)) {
            c = c.getParent();
        }
        for (int i = 0; i <= list.size() - 1; i++) {
            entity.Tabela t1 = list.get(i);
            masterTable.setRowSelectionInterval(i, i);
            masterTable.scrollRectToVisible(masterTable.getCellRect(i, 0, true));
            validarSentenca();
        }
    }

}
