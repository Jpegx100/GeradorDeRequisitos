/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.tools;

import dados.DAO.DAO;
import dados.DAO.DicionarioDAO;
import visao.view.JTable.CustomRendererTableDicionario;
import visao.view.JTable.CustomRendererTableSinonimos;
import controle.dicionario.Dicionario;
import entity.Projeto;
import entity.Conceito;
import entity.SinonimoDominio;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.Query;
import javax.persistence.metamodel.SingularAttribute;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import visao.view.tools.Constante;

/**
 *
 * @author helcio.soares
 */
public class SinonimoView extends javax.swing.JDialog {

    private Dicionario dicionario;
    private Projeto projetoSelecionado;
    private JMenuItem agrupar;
    private JMenuItem adicionarSinonimo;
    private JTable tabelaSelecionada;
    private DicionarioDAO dicionarioDAO = new DicionarioDAO();
    private int numeroPrimeiraLinha = 0;
    private JMenuItem desagrupar;
    CustomRendererTableSinonimos cr;
    int linhas[] = {0};
    java.util.List<entity.Conceito> listaSelecionada;
    private SinonimoAdd sinonimoAdd;

    /**
     * Creates new form SinonimoView
     */
    public SinonimoView(java.awt.Dialog parent, boolean modal, Projeto projetoSelecionado) {
        super(parent, modal);
        this.projetoSelecionado = projetoSelecionado;
        dicionario = new Dicionario(projetoSelecionado);
        initComponents();
        contruirPopupMenu(this.projetoSelecionado);
        Color bg = jTableAcoes.getSelectionBackground();
        cr = new CustomRendererTableSinonimos(jTableAcoes.getDefaultRenderer(Object.class), bg, linhas, numeroPrimeiraLinha);
        jTableConceito.setDefaultRenderer(Object.class, cr);
        jTableAcoes.setDefaultRenderer(Object.class, cr);
        carregarTabelas();
    }

    public Projeto getProjetoSelecionado() {
        return projetoSelecionado;
    }

    public void setProjetoSelecionado(Projeto projetoSelecionado) {
        this.projetoSelecionado = projetoSelecionado;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SRSEDITORPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("SRSEDITORPU").createEntityManager();
        conceitoQuery = java.beans.Beans.isDesignTime() ? null : SRSEDITORPUEntityManager.createQuery("SELECT c FROM Conceito c\nwhere c.idTipoConceito in (101,102) and c.idProjeto = :idProjeto\norder by c.de");
        conceitoQuery.setParameter("idProjeto", this.projetoSelecionado.getId());
        conceitoList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : conceitoQuery.getResultList();
        conceitoQuery1 = java.beans.Beans.isDesignTime() ? null : SRSEDITORPUEntityManager.createQuery("SELECT c FROM Conceito c\nwhere c.idTipoConceito in (103,105)  \nand c.idProjeto = :idProjeto\norder by c.de");
        conceitoQuery1.setParameter("idProjeto", this.projetoSelecionado.getId());
        conceitoList1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : conceitoQuery1.getResultList();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        sinonimoDominioQuery = java.beans.Beans.isDesignTime() ? null : SRSEDITORPUEntityManager.createQuery("SELECT s FROM SinonimoDominio s\nwhere s.idProjeto = :idProjeto\nand   s.chave     <> s.sinonimo\nand   s.sinonimo <> null      ");
        sinonimoDominioQuery.setParameter("idProjeto", this.projetoSelecionado);
        sinonimoDominioList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : sinonimoDominioQuery.getResultList();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableConceito = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableAcoes = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableSinonimosDominio = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Dcionário de sinônimos");

        jTableConceito.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Conceito/Conceito composto"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableConceito.setToolTipText("");
        jTableConceito.setName("Conceito"); // NOI18N
        jTableConceito.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTableConceito.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableConceitoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableConceito);

        jTableAcoes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ação/Funcionalidade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAcoes.setName("Acoes"); // NOI18N
        jTableAcoes.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTableAcoes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableConceitoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableAcoes);

        jTableSinonimosDominio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sinônimo principal", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableSinonimosDominio.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jTableSinonimosDominio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableSinonimosDominioMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableSinonimosDominio);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTableConceitoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableConceitoMouseClicked
        // TODO add your handling code here:

        tabelaSelecionada = (JTable) evt.getComponent();
        Integer i = tabelaSelecionada.getSelectedColumn();
        if (tabelaSelecionada.getName().toLowerCase().contains("conceito")) {
            listaSelecionada = conceitoList;
            jTableAcoes.clearSelection();
        } else {
            listaSelecionada = conceitoList1;
            jTableConceito.clearSelection();
        }
        linhas = tabelaSelecionada.getSelectedRows();
        boolean habilitarAgrupar = tabelaSelecionada.getSelectedRowCount() > 1;
        agrupar.setEnabled(habilitarAgrupar);

        if (!habilitarAgrupar) {
            numeroPrimeiraLinha = tabelaSelecionada.getSelectedRow();
        }
        desagrupar.setEnabled(habilitarAgrupar);
        prepararTabela(tabelaSelecionada);
        if (evt.getButton() == MouseEvent.BUTTON3 && i >= 0) {
            jPopupMenu1.show(tabelaSelecionada, evt.getX(), evt.getY());
        }
        selecionarSinonimos(numeroPrimeiraLinha);

    }//GEN-LAST:event_jTableConceitoMouseClicked

    private void jTableSinonimosDominioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSinonimosDominioMouseClicked
        jTableAcoes.clearSelection();
        jTableConceito.clearSelection();
        int[] linhasSelecionadas = jTableSinonimosDominio.getSelectedRows();
        String sinonimoSelecionado = sinonimoDominioList.get(linhasSelecionadas[0]).getSinonimo();
        int linha = verificarTabela(sinonimoSelecionado, conceitoList);
        if (linha != 0) {
            tabelaSelecionada = jTableConceito;
            listaSelecionada = conceitoList;
        } else {
            linha = verificarTabela(sinonimoSelecionado, conceitoList1);
            tabelaSelecionada = jTableAcoes;
            listaSelecionada = conceitoList1;
        }
        numeroPrimeiraLinha = linha;
        tabelaSelecionada.clearSelection();
        ListSelectionModel selectionModel = tabelaSelecionada.getSelectionModel();
        selectionModel.setSelectionInterval(linha, linha);
        prepararTabela(tabelaSelecionada);
    }//GEN-LAST:event_jTableSinonimosDominioMouseClicked

    private int verificarTabela(String sinonimoSelecionado, List<Conceito> lista) {
        int t = lista.size() - 1;
        for (int i = 0; i <= t; i++) {
            if (lista.get(i).getNomeLemma().endsWith(sinonimoSelecionado)) {
                return i;
            }
        }
        return 0;
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager SRSEDITORPUEntityManager;
    private java.util.List<entity.Conceito> conceitoList;
    private java.util.List<entity.Conceito> conceitoList1;
    private javax.persistence.Query conceitoQuery;
    private javax.persistence.Query conceitoQuery1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableAcoes;
    private javax.swing.JTable jTableConceito;
    private javax.swing.JTable jTableSinonimosDominio;
    private java.util.List<entity.SinonimoDominio> sinonimoDominioList;
    private javax.persistence.Query sinonimoDominioQuery;
    // End of variables declaration//GEN-END:variables

    public void contruirPopupMenu(Projeto projetoSelecionadoSelecionado) {

        ActionListener anActionListenerSinonimoAdd = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                int[] linhasSelecionadas = tabelaSelecionada.getSelectedRows();
                int coluna = tabelaSelecionada.getSelectedColumn();
                try {
                    sinonimoAdd = new SinonimoAdd(new javax.swing.JFrame(), rootPaneCheckingEnabled);
                    sinonimoAdd.setLocationRelativeTo(null);
                    sinonimoAdd.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
                    sinonimoAdd.setVisible(true);
                    if (sinonimoAdd.getReturnStatus() == 1 && !sinonimoAdd.getNovoConceito().equals("")) {
                        adicionarConceito(sinonimoAdd.getNovoConceito().getText().toLowerCase());
                    }
                } catch (Exception ex) {
                    Logger.getLogger(DicionarioView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };

        ActionListener anActionListenerSinonimo = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                int[] linhasSelecionadas = tabelaSelecionada.getSelectedRows();
                JMenuItem j = (JMenuItem) e.getSource();
                try {
                    if (j.getText().contains("Agrupar")) {
                        dicionario.agruparSinonimos(linhasSelecionadas, numeroPrimeiraLinha, listaSelecionada);
                    } else {
                        dicionario.desAgruparSinonimos(linhasSelecionadas, numeroPrimeiraLinha, listaSelecionada);
                        tabelaSelecionada.clearSelection();
                    }
                    carregarTabelaSinonimo();
                } catch (Exception ex) {
                    Logger.getLogger(DicionarioView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };

        adicionarSinonimo = new JMenuItem("Adicionar sinonimo");
        agrupar = new JMenuItem("Agrupar");
        desagrupar = new JMenuItem("Desagrupar");
        agrupar.addActionListener(anActionListenerSinonimo);
        desagrupar.addActionListener(anActionListenerSinonimo);
        adicionarSinonimo.addActionListener(anActionListenerSinonimoAdd);
        jPopupMenu1.add(adicionarSinonimo);
        jPopupMenu1.add(agrupar);
        jPopupMenu1.add(desagrupar);

    }

    private void adicionarConceito(String novoConceito) throws Exception {
        DAO<Conceito> cDAO = new DAO(Conceito.class);

        int[] linhasSelecionadas = tabelaSelecionada.getSelectedRows();
        Conceito cs = listaSelecionada.get(numeroPrimeiraLinha);

        String lemma = Constante.recuperarLemmaDaPalavra(novoConceito);
        Conceito c = new Conceito();
        c.setDe(novoConceito);
        c.setNomeLemma(lemma);
        c.setIdProjeto(projetoSelecionado.getId());
        c.setF(cs.getF());

        int posicaoEspaco = novoConceito.indexOf(" ");
        if (tabelaSelecionada.getName().toLowerCase().contains("conceito")) {
            c.setIdTipoConceito(posicaoEspaco < 0 ? 101 : 102);
        } else {
            c.setIdTipoConceito(posicaoEspaco < 0 ? 103 : 104);
        }
        try {
            cDAO.adiciona(c);

            ArrayList<Conceito> conceitosSelecionados = new ArrayList<Conceito>();
            for (int linha : linhasSelecionadas) {
                conceitosSelecionados.add(listaSelecionada.get(linha));
            }

            carregarTabelas();
            numeroPrimeiraLinha = listaSelecionada.indexOf(cs);
            conceitosSelecionados.add(c);

            ListSelectionModel selectionModel = tabelaSelecionada.getSelectionModel();
            for (int i = 0; i <= conceitosSelecionados.size() - 1; i++) {
                int linhasSelecionada = listaSelecionada.indexOf(conceitosSelecionados.get(i));
                if (i == 0) {
                    selectionModel.setSelectionInterval(linhasSelecionada, linhasSelecionada);
                } else {
                    selectionModel.addSelectionInterval(linhasSelecionada, linhasSelecionada);
                }
            }
            int[] linhasSelecionadas1 = tabelaSelecionada.getSelectedRows();
            dicionario.agruparSinonimos(linhasSelecionadas1, numeroPrimeiraLinha, listaSelecionada);
            cr.setLinhas(linhasSelecionadas1);
            cr.setNumeroPrimeiraLinha(numeroPrimeiraLinha);
        } catch (javax.persistence.RollbackException e) {
            JOptionPane.showMessageDialog(null, "Conceito: " + c.getDe() + " já cadastrado!");

        }
    }

    public void carregarTabelas() {
        carregarTabela(conceitoQuery, conceitoList, jTableConceito);
        carregarTabela(conceitoQuery1, conceitoList1, jTableAcoes);
        carregarTabelaSinonimo();
    }

    private void carregarTabela(Query conceitoQuery, List<Conceito> conceitoList, JTable tabela) {
        DefaultTableModel dtm = (DefaultTableModel) tabela.getModel();
        dtm.setNumRows(0);
        java.util.Collection data = conceitoQuery.getResultList();
        conceitoList.clear();
        conceitoList.addAll(data);
        int i = 1;
        for (Conceito coneito : conceitoList) {
            dtm.addRow(new Object[]{coneito.getDe(), ""});
            i++;
        }
        tabela.revalidate();
    }

    private void carregarTabelaSinonimo() {
        DefaultTableModel dtm = (DefaultTableModel) jTableSinonimosDominio.getModel();
        dtm.setNumRows(0);
        java.util.Collection data = sinonimoDominioQuery.getResultList();
        sinonimoDominioList.clear();
        sinonimoDominioList.addAll(data);
        int i = 1;
        for (SinonimoDominio sinonimoDominio : sinonimoDominioList) {
            dtm.addRow(new Object[]{sinonimoDominio.getConceitoSinonimo().getDe(), sinonimoDominio.getConceitoChave().getDe()});
            i++;
        }
        jTableSinonimosDominio.revalidate();
    }

    private void selecionarSinonimos(int numeroPrimeiraLinha) {
        ListSelectionModel selectionModel = jTableSinonimosDominio.getSelectionModel();
        String conceitoSelecionado = listaSelecionada.get(numeroPrimeiraLinha).getDe();

        boolean naoTem = true;
        for (int i = 0; i <= sinonimoDominioList.size() - 1; i++) {
            if (sinonimoDominioList.get(i).getSinonimo().equals(conceitoSelecionado)) {
                if (i == 0) {
                    selectionModel.setSelectionInterval(i, i);
                } else {
                    selectionModel.addSelectionInterval(i, i);
                }
                naoTem = false;
            }
        }
        if (naoTem) {
            jTableSinonimosDominio.clearSelection();
        }
        prepararTabela(tabelaSelecionada);
    }

    private void prepararTabela(JTable tabelaSelecionada) {

        tabelaSelecionada = dicionario.selecionarLinhas(tabelaSelecionada, listaSelecionada, numeroPrimeiraLinha);
        numeroPrimeiraLinha = dicionario.numeroPrimeiraLinha;
        cr.setLinhas(linhas);
        cr.setNumeroPrimeiraLinha(numeroPrimeiraLinha);
        ListSelectionModel selectionModel = tabelaSelecionada.getSelectionModel();
        selectionModel.setSelectionMode(selectionModel.MULTIPLE_INTERVAL_SELECTION);
    }

}
